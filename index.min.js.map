{"version":3,"sources":["node_modules/browser-pack/_prelude.js","javascript/index.js","javascript/modules/AlertHandler.js","javascript/modules/ImageGeolocationHandler.js","javascript/modules/UploadFileHandler.js","javascript/modules/ValidateHandler.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_UploadFileHandler","_interopRequireDefault","UIinput","document","querySelector","UIoutput","uploadImage","removeImage","AlertHandler","displayError","errors","errorDurationTime","errorMessages","Object","keys","filter","key","isCorrect","map","description","forEach","errorMessage","errorTemplate","createElement","classList","add","innerText","concat","prepend","setTimeout","removeChild","ImageGeolocationHandler","toDecimal","number","numerator","denominator","returnLongLat","imgHTMLElement","callback","EXIF","getData","longitude","getTag","this","latitude","longLat","_ImageGeolocationHandler","_ValidateHandler","_AlertHandler","UploadFileHandler","singleImageTemplate","fileObject","cardDiv","cardImageDiv","cardTitleSpan","cardContent","pictureInfoList","image","fileExtension","fileSize","fileGeoLocation","removeButton","src","URL","createObjectURL","name","type","size","onload","appendChild","imageUploadHandler","fileInput","outputContainer","addEventListener","event","Array","from","target","files","file","validateImage","console","log","hasGPSData","goodFileSize","validFileExtension","removeImageHandler","imagesContainer","className","parentElement","remove","ValidateHandler","_validateGPSData","valid","_validateFileSize","fileSizeLimitKB","fileSizeKB","_validateFileExtension","acceptableFileExtensionsArray","includes","gpsIsValid"],"mappings":"CAAA,WAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,OAAAJ,GAAA,EAAA,CAAA,CAAAiB,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gBCAA,IAAAK,EAAAC,EAAAZ,EAAA,mFAEA,IAAMa,EAAUC,SAASC,cAAc,uBACvC,IAAMC,EAAWF,SAASC,cAAc,mBACxCJ,EAAA,WAAkBM,YAAYJ,EAASG,GACvCL,EAAA,WAAkBO,YAAYF,8ICL9B,IAAMG,EAAgB,WAClB,SAASC,EAAaC,EAAQL,EAAUM,GAEpC,IAAMC,EAAeC,OAAOC,KAAKJ,GAAQK,OAAO,SAASC,GACrD,OAAON,EAAOM,GAAKC,YAAc,QAClCC,IAAI,SAASF,GACZ,OAAON,EAAOM,GAAKG,cAGvBP,EAAcQ,QAAQ,SAASC,GAC3B,IAAMC,EAAgBnB,SAASoB,cAAc,KAC7CD,EAAcE,UAAUC,IAAI,eAC5BH,EAAcI,UAAd,UAAAC,OAAoCN,GAEpChB,EAASuB,QAAQN,GACjBO,WAAW,WACPxB,EAASyB,YAAYR,IACtBX,KAKX,MAAM,CACFF,aAAcA,GAvBA,SA2BPD,6HCxBf,IAAMuB,EAA2B,WAE7B,IAAMC,EAAY,SAAZA,EAAsBC,GACxB,OAAOA,EAAO,GAAGC,UAAYD,EAAO,GAAGC,WAClC,GAAKD,EAAO,GAAGE,aAAeF,EAAO,GAAGC,WAAa,KAAOD,EAAO,GAAGE,cAG/E,SAASC,EAAcC,EAAgBC,GAEnCC,KAAKC,QAAQH,EAAgB,WAEzB,IAAII,EAAYT,EAAUO,KAAKG,OAAOC,KAAK,iBAC3C,IAAIC,EAAWZ,EAAUO,KAAKG,OAAOC,KAAM,gBAE3C,IAAME,EAAU,CACZJ,UAAWA,EACXG,SAAUA,GAGdN,EAASO,KAKjB,MAAO,CACHT,cAAeA,GAzBU,SA8BlBL,6HChCf,IAAAe,EAAA7C,EAAAZ,EAAA,8BACA,IAAA0D,EAAA9C,EAAAZ,EAAA,sBACA,IAAA2D,EAAA/C,EAAAZ,EAAA,sEAEA,IAAM4D,EAAqB,SAASlB,GAEhC,SAASmB,EAAoBC,GAEzB,IAAMC,EAAUjD,SAASoB,cAAc,OACnC6B,EAAQ5B,UAAUC,IAAI,QAC1B,IAAM4B,EAAelD,SAASoB,cAAc,OACxC8B,EAAa7B,UAAUC,IAAI,cAC/B,IAAM6B,EAAgBnD,SAASoB,cAAc,QACzC+B,EAAc9B,UAAUC,IAAI,cAChC,IAAM8B,EAAcpD,SAASoB,cAAc,OACvCgC,EAAY/B,UAAUC,IAAI,gBAG9B,IAAM+B,EAAkBrD,SAASoB,cAAc,MAE3C,IAAMkC,EAAQtD,SAASoB,cAAc,OACrC,IAAMmC,EAAgBvD,SAASoB,cAAc,MAC7C,IAAMoC,EAAWxD,SAASoB,cAAc,MACxC,IAAIqC,EAAkBzD,SAASoB,cAAc,MAC7C,IAAMsC,EAAe1D,SAASoB,cAAc,MAGhDkC,EAAMK,IAAMC,IAAIC,gBAAgBb,GAChCG,EAAc5B,UAAd,cAAAC,OAAwCwB,EAAWc,MACnDP,EAAchC,UAAd,mBAAAC,OAA6CwB,EAAWe,MACxDP,EAASjC,UAAT,cAAAC,OAAmCwB,EAAWgB,MAC9CN,EAAanC,UAAY,cACrBmC,EAAarC,UAAUC,IAAI,cAE/BgC,EAAMW,OAAS,WACXrC,EAAwBK,cAAcqB,EAAO,SAASZ,GAClDe,EAAgBlC,UAAhB,mCAAAC,OAA+DkB,EAAQJ,UAAvE,oBAAAd,OAAmGkB,EAAQD,aAKvGS,EAAagB,YAAYZ,GACzBJ,EAAagB,YAAYf,GAC7BE,EAAgBa,YAAYhB,GAC5BG,EAAgBa,YAAYX,GAC5BF,EAAgBa,YAAYV,GAC5BH,EAAgBa,YAAYT,GAC5BJ,EAAgBa,YAAYR,GAChCN,EAAYc,YAAYb,GAC5BJ,EAAQiB,YAAYhB,GACpBD,EAAQiB,YAAYd,GAEpB,OAAOH,EAGX,SAASkB,EAAmBC,EAAWC,GAEnCD,EAAUE,iBAAiB,SAAU,SAASC,GAC1C,IAAMH,EAAYI,MAAMC,KAAKF,EAAMG,OAAOC,OAC1CP,EAAUnD,QAAQ,SAAS2D,GACvBhC,EAAA,WAAgBiC,cAAcD,EAAM,SAASrE,GACzCuE,QAAQC,IAAIxE,GACZ,GAAGA,EAAOyE,WAAWlE,WAAaP,EAAO0E,aAAanE,WAAaP,EAAO2E,mBAAmBpE,UAAU,CAEnGuD,EAAgBH,YAAYnB,EAAoB6B,QAC7C,CACH/B,EAAA,WAAavC,aAAaC,EAAQP,SAASC,cAAc,QAAS,YAOtF,SAASkF,EAAmBC,GACxBA,EAAgBd,iBAAiB,QAAS,SAASC,GAC/C,GAAGA,EAAMG,OAAOW,YAAc,aAAa,CACvCd,EAAMG,OAAOY,cAAcA,cAAcA,cAAcC,YAKnE,MAAM,CACFpF,YAAagE,EACb/D,YAAa+E,EACbpC,oBAAqBA,GAhFF,CAkFxBJ,EAAA,kBAGYG,mMCzFf,IAAM0C,EAAmB,WAErB,IAAMC,EAAmB,SAAnBA,EAA4BnC,EAAOnB,GACrCC,KAAKC,QAAQiB,EAAO,WAChB,IAAIoC,EAAQtD,KAAKG,OAAOC,KAAM,gBAAkB,KAAO,MACvDL,EAASuD,MAIjB,IAAMC,EAAoB,SAApBA,EAA6BnC,EAASoC,GACxC,IAAMC,EAAarC,EAAS,IAC5B,OAAQqC,GAAcD,GAG1B,IAAME,EAAyB,SAAzBA,EAAkCvC,EAAcwC,GAClD,OAAQA,EAA8BC,SAASzC,IAInD,IAAMsB,EAAgB,SAAhBA,EAAyBvB,EAAOnB,GAClC,IAAM5B,EAAS,CACXyE,WAAY,CACRlE,UAAU,MACVE,YAAa,6DAEjBiE,aAAc,CACVnE,UAAW,MACXE,YAAa,4BAEjBkE,mBAAoB,CAChBpE,UAAW,MACXE,YAAa,oBAIrByE,EAAiBnC,EAAO,SAAS2C,GAC7B1F,EAAOyE,WAAWlE,UAAYmF,EAC9B1F,EAAO0E,aAAanE,UAAY6E,EAAkBrC,EAAMU,KAAM,KAC9DzD,EAAO2E,mBAAmBpE,UAAYgF,EAAuBxC,EAAMS,KAAM,CAAC,eAC1E5B,EAAS5B,MAKjB,MAAM,CACFsE,cAAeA,GA7CE,SAiDVW","file":"index.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import UploadFileHandler from './modules/UploadFileHandler';\n\nconst UIinput = document.querySelector('#upload-file__image');\nconst UIoutput = document.querySelector('#upload-preview');\nUploadFileHandler.uploadImage(UIinput, UIoutput);\nUploadFileHandler.removeImage(UIoutput);","const AlertHandler = (function(){\n    function displayError(errors, UIoutput, errorDurationTime){\n        //Convert errors to array of error messages\n        const errorMessages= Object.keys(errors).filter(function(key){\n            return errors[key].isCorrect === false\n        }).map(function(key){\n            return errors[key].description\n        })\n\n        errorMessages.forEach(function(errorMessage){\n            const errorTemplate = document.createElement('p');\n            errorTemplate.classList.add('error-popup');\n            errorTemplate.innerText = `Error: ${errorMessage}`;\n\n            UIoutput.prepend(errorTemplate);\n            setTimeout(function(){\n                UIoutput.removeChild(errorTemplate)\n            }, errorDurationTime) \n        }) \n\n    }\n\n    return{\n        displayError: displayError\n    }\n})();\n\nexport default AlertHandler","//Module getting the geolocation of the image\n    //Accepts image and a callback function that handles the data return\n\nconst ImageGeolocationHandler = (function(){\n    //Helper function returning longitude and latitude as a float\n    const toDecimal = function (number) {\n        return number[0].numerator + number[1].numerator /\n            (60 * number[1].denominator) + number[2].numerator / (3600 * number[2].denominator);\n    };\n\n    function returnLongLat(imgHTMLElement, callback){\n        //function accepting the image and callback returning the data\n        EXIF.getData(imgHTMLElement, function(){\n\n            let longitude = toDecimal(EXIF.getTag(this,'GPSLongitude'));\n            let latitude = toDecimal(EXIF.getTag(this, 'GPSLatitude')); \n            \n            const longLat = {\n                longitude: longitude,\n                latitude: latitude\n            }   \n\n            callback(longLat)\n        })\n    }\n\n    //Public functions\n    return {\n        returnLongLat: returnLongLat \n    }\n\n})();\n\nexport default ImageGeolocationHandler;","//Modeule handling image upload and getting all information\nimport ImageGeolocationHandler from './ImageGeolocationHandler';\nimport ValidateHandler from './ValidateHandler';\nimport AlertHandler from './AlertHandler';\n\nconst UploadFileHandler = (function(ImageGeolocationHandler){\n    \n    function singleImageTemplate(fileObject){ \n        //Materializecss DOM elements\n        const cardDiv = document.createElement('div');\n            cardDiv.classList.add('card');\n        const cardImageDiv = document.createElement('div');\n            cardImageDiv.classList.add('card-image');\n        const cardTitleSpan = document.createElement('span');\n            cardTitleSpan.classList.add('card-title');\n        const cardContent = document.createElement('div');\n            cardContent.classList.add('card-content');\n\n        //Create DOM elements with data\n        const pictureInfoList = document.createElement('ul');\n            // const imageMiniature = document.createElement('li');\n            const image = document.createElement('img');\n            const fileExtension = document.createElement('li');\n            const fileSize = document.createElement('li');\n            let fileGeoLocation = document.createElement('li');\n            const removeButton = document.createElement('li');\n\n        //Update DOM elements with data\n        image.src = URL.createObjectURL(fileObject);\n        cardTitleSpan.innerText = `File name: ${fileObject.name}`;\n        fileExtension.innerText = `File extension: ${fileObject.type}`;\n        fileSize.innerText = `File size: ${fileObject.size}`;\n        removeButton.innerText = 'remove item';\n            removeButton.classList.add('btn-remove')\n        \n        image.onload = function(){\n            ImageGeolocationHandler.returnLongLat(image, function(longLat){\n                fileGeoLocation.innerText = `Picture was taken on longitude: ${longLat.longitude}, and latitude: ${longLat.latitude}`\n            })\n        }\n\n        //Update the parent list\n                    cardImageDiv.appendChild(image); \n                    cardImageDiv.appendChild(cardTitleSpan);\n                pictureInfoList.appendChild(cardImageDiv);\n                pictureInfoList.appendChild(fileExtension);\n                pictureInfoList.appendChild(fileSize);\n                pictureInfoList.appendChild(fileGeoLocation);\n                pictureInfoList.appendChild(removeButton);\n            cardContent.appendChild(pictureInfoList);\n        cardDiv.appendChild(cardImageDiv)\n        cardDiv.appendChild(cardContent)\n\n        return cardDiv;\n    }\n\n    function imageUploadHandler(fileInput, outputContainer){\n        //Add on change event handler to upload image to website\n        fileInput.addEventListener('change', function(event){\n            const fileInput = Array.from(event.target.files); \n            fileInput.forEach(function(file){\n                ValidateHandler.validateImage(file, function(errors){\n                    console.log(errors)\n                    if(errors.hasGPSData.isCorrect && errors.goodFileSize.isCorrect && errors.validFileExtension.isCorrect){\n                        //Create single uploaded image and add metadata  \n                        outputContainer.appendChild(singleImageTemplate(file));\n                    } else {\n                        AlertHandler.displayError(errors, document.querySelector('body'), 3000)\n                    }\n                })\n            })\n        })\n    }\n\n    function removeImageHandler(imagesContainer){\n        imagesContainer.addEventListener('click', function(event){\n            if(event.target.className === \"btn-remove\"){\n                event.target.parentElement.parentElement.parentElement.remove()\n            }\n        })\n    }\n    \n    return{\n        uploadImage: imageUploadHandler,\n        removeImage: removeImageHandler,\n        singleImageTemplate: singleImageTemplate\n    }\n})(ImageGeolocationHandler)\n\n\nexport default UploadFileHandler;","\nconst ValidateHandler = (function(){\n\n    const _validateGPSData = function(image, callback){\n        EXIF.getData(image, function(){\n            let valid = EXIF.getTag(this, 'GPSLongitude') ? true : false; \n            callback(valid);\n        }) \n    }\n\n    const _validateFileSize = function(fileSize,fileSizeLimitKB){\n        const fileSizeKB = fileSize/1000;\n        return (fileSizeKB <= fileSizeLimitKB)\n    }\n\n    const _validateFileExtension = function(fileExtension,acceptableFileExtensionsArray){\n        return (acceptableFileExtensionsArray.includes(fileExtension))\n    }\n\n    //Validate image and return a object with checks in the callback\n    const validateImage = function(image, callback){\n        const errors = {\n            hasGPSData: {\n                isCorrect:false,\n                description: 'Image uploaded does not have EXIF metadata on geolocation'\n            },\n            goodFileSize: {\n                isCorrect: false,\n                description: 'Image uploaded is to big'\n            }, \n            validFileExtension: {\n                isCorrect: false,\n                description: 'Bad file format'\n            }\n        }\n\n        _validateGPSData(image, function(gpsIsValid){\n            errors.hasGPSData.isCorrect = gpsIsValid;\n            errors.goodFileSize.isCorrect = _validateFileSize(image.size, 1000);\n            errors.validFileExtension.isCorrect = _validateFileExtension(image.type, [\"image/jpeg\"])\n            callback(errors)\n        })\n\n    }\n\n    return{\n        validateImage: validateImage\n    }\n})();\n\nexport default ValidateHandler;"]}